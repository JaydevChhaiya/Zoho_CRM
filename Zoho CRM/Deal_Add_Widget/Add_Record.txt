<!DOCTYPE html>
<html>

<head>
  <script src="https://live.zwidgets.com/js-sdk/1.2/ZohoEmbededAppSDK.min.js"></script>
  <meta charset="UTF-8">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      font-family: 'Inter', 'Segoe UI', 'Roboto', -apple-system, BlinkMacSystemFont, sans-serif;
      min-height: 100vh;
      padding: 20px;
      position: relative;
      overflow-x: hidden;
    }

    /* Animated Background */
    body::before {
      content: '';
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: 
        radial-gradient(circle at 20% 50%, rgba(120, 119, 198, 0.4) 0%, transparent 50%),
        radial-gradient(circle at 80% 20%, rgba(255, 255, 255, 0.15) 0%, transparent 50%),
        radial-gradient(circle at 40% 80%, rgba(120, 119, 198, 0.3) 0%, transparent 50%);
      pointer-events: none;
      animation: backgroundFloat 20s ease-in-out infinite;
    }

    @keyframes backgroundFloat {
      0%, 100% { transform: translateY(0px) rotate(0deg); }
      50% { transform: translateY(-20px) rotate(2deg); }
    }

    /* Floating Particles */
    body::after {
      content: '';
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-image: 
        radial-gradient(2px 2px at 20px 30px, rgba(255,255,255,0.3), transparent),
        radial-gradient(2px 2px at 40px 70px, rgba(255,255,255,0.2), transparent),
        radial-gradient(1px 1px at 90px 40px, rgba(255,255,255,0.4), transparent),
        radial-gradient(1px 1px at 130px 80px, rgba(255,255,255,0.3), transparent);
      background-repeat: repeat;
      background-size: 150px 100px;
      animation: sparkle 8s linear infinite;
      pointer-events: none;
    }

    @keyframes sparkle {
      0% { transform: translateY(0px); }
      100% { transform: translateY(-100px); }
    }

    #productList {
      background: rgba(255, 255, 255, 0.98);
      backdrop-filter: blur(30px);
      border-radius: 24px;
      box-shadow: 
        0 25px 80px rgba(0, 0, 0, 0.2),
        0 15px 35px rgba(0, 0, 0, 0.15),
        inset 0 1px 0 rgba(255, 255, 255, 0.8);
      max-width: 1200px;
      margin: 0 auto;
      padding: 45px;
      position: relative;
      border: 1px solid rgba(255, 255, 255, 0.3);
      transform: translateY(0);
      transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
      animation: containerSlideIn 0.8s ease-out;
    }

    @keyframes containerSlideIn {
      from {
        opacity: 0;
        transform: translateY(50px) scale(0.95);
      }
      to {
        opacity: 1;
        transform: translateY(0) scale(1);
      }
    }

    #productList:hover {
      transform: translateY(-5px);
      box-shadow: 
        0 35px 100px rgba(0, 0, 0, 0.25),
        0 20px 45px rgba(0, 0, 0, 0.2),
        inset 0 1px 0 rgba(255, 255, 255, 0.9);
    }

    /* Top Border Animation */
    #productList::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 4px;
      background: linear-gradient(90deg, #667eea, #764ba2, #667eea, #764ba2);
      background-size: 400% 100%;
      border-radius: 24px 24px 0 0;
      animation: gradientShift 3s ease-in-out infinite;
    }

    @keyframes gradientShift {
      0%, 100% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
    }

    .widget-header {
      text-align: center;
      margin-bottom: 40px;
      position: relative;
    }

    .widget-title {
      font-size: 32px;
      font-weight: 800;
      color: #2c3e50;
      margin-bottom: 12px;
      background: linear-gradient(135deg, #667eea, #764ba2, #667eea);
      background-size: 200% 200%;
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      animation: textShimmer 4s ease-in-out infinite;
      position: relative;
    }

    @keyframes textShimmer {
      0%, 100% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
    }

    .widget-title::after {
      content: '';
      position: absolute;
      bottom: -8px;
      left: 50%;
      transform: translateX(-50%);
      width: 80px;
      height: 3px;
      background: linear-gradient(90deg, transparent, #667eea, transparent);
      border-radius: 2px;
    }

    .widget-subtitle {
      font-size: 18px;
      color: #7f8c8d;
      font-weight: 500;
      opacity: 0;
      animation: fadeInUp 1s ease-out 0.5s forwards;
    }

    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .deal-info {
      margin-bottom: 35px;
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 30px;
      padding: 30px;
      background: linear-gradient(135deg, rgba(102, 126, 234, 0.08) 0%, rgba(118, 75, 162, 0.08) 100%);
      border: 1px solid rgba(102, 126, 234, 0.15);
      border-radius: 20px;
      position: relative;
      overflow: hidden;
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .deal-info:hover {
      transform: translateY(-2px);
      box-shadow: 0 15px 35px rgba(102, 126, 234, 0.15);
      background: linear-gradient(135deg, rgba(102, 126, 234, 0.12) 0%, rgba(118, 75, 162, 0.12) 100%);
    }

    .deal-info::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 5px;
      height: 100%;
      background: linear-gradient(135deg, #667eea, #764ba2);
      transition: width 0.4s ease;
    }

    .deal-info:hover::before {
      width: 8px;
    }

    .form-group {
      display: flex;
      flex-direction: column;
      gap: 12px;
      position: relative;
    }

    .form-group label {
      font-weight: 700;
      color: #2c3e50;
      font-size: 14px;
      text-transform: uppercase;
      letter-spacing: 1px;
      transition: color 0.3s ease;
    }

    .form-group:hover label {
      color: #667eea;
    }

    .form-group input {
      padding: 16px 20px;
      border: 2px solid rgba(102, 126, 234, 0.15);
      border-radius: 14px;
      font-size: 16px;
      background: rgba(255, 255, 255, 0.9);
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      font-weight: 500;
      position: relative;
    }

    .form-group input:focus {
      border-color: #667eea;
      background: rgba(255, 255, 255, 1);
      box-shadow: 
        0 0 0 4px rgba(102, 126, 234, 0.1),
        0 8px 20px rgba(102, 126, 234, 0.15);
      outline: none;
      transform: translateY(-2px) scale(1.02);
    }

    /* Enhanced Table Styling */
    .table-container {
      overflow-x: auto;
      margin-bottom: 30px;
      border-radius: 20px;
      box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
    }

    table {
      width: 100%;
      border-collapse: separate;
      border-spacing: 0;
      border-radius: 20px;
      overflow: hidden;
      position: relative;
      min-width: 800px;
    }

    thead tr {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      position: relative;
    }

    thead tr::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(45deg, transparent 30%, rgba(255,255,255,0.1) 50%, transparent 70%);
      animation: headerShine 3s ease-in-out infinite;
    }

    @keyframes headerShine {
      0%, 100% { transform: translateX(-100%); }
      50% { transform: translateX(100%); }
    }

    th {
      color: #fff;
      font-weight: 700;
      font-size: 13px;
      padding: 18px 10px;
      text-align: center;
      letter-spacing: 0.8px;
      text-transform: uppercase;
      border-right: 1px solid rgba(255, 255, 255, 0.2);
      position: relative;
      text-shadow: 0 1px 2px rgba(0,0,0,0.2);
    }

    th:last-child {
      border-right: none;
    }

    /* Column specific widths */
    th:nth-child(1) { width: 15%; } /* Category */
    th:nth-child(2) { width: 25%; } /* Product */
    th:nth-child(3) { width: 12%; } /* Price */
    th:nth-child(4) { width: 12%; } /* Available Qty */
    th:nth-child(5) { width: 12%; } /* Quantity */
    th:nth-child(6) { width: 14%; } /* Total */
    th:nth-child(7) { width: 10%; } /* Remove */

    tbody tr {
      background: rgba(255, 255, 255, 0.95);
      border-bottom: 1px solid rgba(102, 126, 234, 0.08);
      position: relative;
      opacity: 0;
      animation: rowSlideIn 0.6s ease-out forwards;
    }

    @keyframes rowSlideIn {
      from {
        opacity: 0;
        transform: translateX(-20px);
      }
      to {
        opacity: 1;
        transform: translateX(0);
      }
    }

    /* Removed all tbody tr hover effects */

    td {
      font-size: 13px;
      padding: 15px 8px;
      vertical-align: middle;
      text-align: center;
      position: relative;
    }

    /* Enhanced Form Controls - Removed hover effects */
    select, input[type="text"], input[type="number"] {
      width: 100%;
      box-sizing: border-box;
      padding: 10px 8px;
      border: 2px solid rgba(102, 126, 234, 0.15);
      border-radius: 10px;
      font-size: 12px;
      background: rgba(255, 255, 255, 0.95);
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      text-align: center;
      font-weight: 500;
    }

    select:focus, input:focus {
      border-color: #667eea;
      background: rgba(255, 255, 255, 1);
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
      outline: none;
      transform: translateY(-1px) scale(1.02);
    }

    /* Removed select:hover and input:hover effects */

    /* Enhanced Buttons */
    .button-container {
      display: flex;
      gap: 20px;
      margin-bottom: 25px;
      justify-content: center;
    }

    button#addRowButton {
      background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
      color: #fff;
      border: none;
      border-radius: 14px;
      padding: 16px 32px;
      font-size: 16px;
      font-weight: 700;
      cursor: pointer;
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      box-shadow: 0 8px 20px rgba(52, 152, 219, 0.3);
      position: relative;
      overflow: hidden;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    button#addRowButton::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
      transition: left 0.6s;
    }

    button#addRowButton:hover::before {
      left: 100%;
    }

    button#addRowButton:hover {
      transform: translateY(-3px) scale(1.05);
      box-shadow: 0 12px 30px rgba(52, 152, 219, 0.4);
      background: linear-gradient(135deg, #3498db 0%, #2980b9 50%, #3498db 100%);
    }

    button#addRowButton:active {
      transform: translateY(-1px) scale(1.02);
    }

    button#purchaseButton {
      background: linear-gradient(135deg, #27ae60 0%, #229954 100%);
      color: #fff;
      border: none;
      border-radius: 14px;
      padding: 16px 32px;
      font-size: 16px;
      font-weight: 700;
      cursor: pointer;
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      box-shadow: 0 8px 20px rgba(39, 174, 96, 0.3);
      position: relative;
      overflow: hidden;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    button#purchaseButton::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
      transition: left 0.6s;
    }

    button#purchaseButton:hover::before {
      left: 100%;
    }

    button#purchaseButton:hover {
      transform: translateY(-3px) scale(1.05);
      box-shadow: 0 12px 30px rgba(39, 174, 96, 0.4);
      background: linear-gradient(135deg, #27ae60 0%, #229954 50%, #27ae60 100%);
    }

    button#purchaseButton:active {
      transform: translateY(-1px) scale(1.02);
    }

    /* Enhanced Grand Total */
    #grandTotal {
      font-size: 28px;
      font-weight: 800;
      background: linear-gradient(135deg, #667eea, #764ba2);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
      text-align: center;
      margin-top: 25px;
      padding: 25px;
      border-radius: 20px;
      background-color: rgba(102, 126, 234, 0.08);
      border: 2px solid rgba(102, 126, 234, 0.15);
      position: relative;
      transition: all 0.4s ease;
      animation: totalPulse 2s ease-in-out infinite;
    }

    @keyframes totalPulse {
      0%, 100% { 
        transform: scale(1);
        box-shadow: 0 0 0 0 rgba(102, 126, 234, 0.7);
      }
      50% { 
        transform: scale(1.01);
        box-shadow: 0 0 0 10px rgba(102, 126, 234, 0);
      }
    }

    #grandTotal:hover {
      transform: scale(1.02);
      background-color: rgba(102, 126, 234, 0.12);
      box-shadow: 0 8px 25px rgba(102, 126, 234, 0.2);
    }

    /* Enhanced Remove Button - Removed hover effects */
    .remove-row-btn {
      background: linear-gradient(135deg, #e74c3c, #c0392b);
      color: #fff;
      border: none;
      border-radius: 50%;
      width: 32px;
      height: 32px;
      font-size: 16px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto;
      box-shadow: 0 4px 15px rgba(231, 76, 60, 0.3);
    }

    /* Removed all remove button hover effects and pseudo-elements */

    /* Loading States */
    .loading {
      position: relative;
      pointer-events: none;
    }

    .loading::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 20px;
      height: 20px;
      margin: -10px 0 0 -10px;
      border: 2px solid #f3f3f3;
      border-top: 2px solid #667eea;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    /* Row fade-out animation */
    .row-removing {
      animation: rowFadeOut 0.5s ease-out forwards;
    }

    @keyframes rowFadeOut {
      0% {
        opacity: 1;
        transform: translateX(0) scale(1);
      }
      50% {
        transform: translateX(-20px) scale(0.95);
      }
      100% {
        opacity: 0;
        transform: translateX(-50px) scale(0.9);
        height: 0;
        padding: 0;
      }
    }

    /* Success Animation */
    @keyframes successPulse {
      0% { 
        transform: scale(1);
        box-shadow: 0 0 0 0 rgba(39, 174, 96, 0.7);
      }
      50% { 
        transform: scale(1.02);
        box-shadow: 0 0 0 20px rgba(39, 174, 96, 0);
      }
      100% { 
        transform: scale(1);
        box-shadow: 0 0 0 0 rgba(39, 174, 96, 0);
      }
    }

    .success {
      animation: successPulse 1s ease-in-out;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      body { padding: 15px; }
      #productList { padding: 25px; }
      .widget-title { font-size: 26px; }
      .deal-info { grid-template-columns: 1fr; gap: 20px; padding: 25px; }
      
      table { min-width: 600px; }
      th, td { font-size: 11px; padding: 10px 5px; }
      
      .button-container { 
        flex-direction: column; 
        align-items: center; 
        gap: 15px;
      }
      button#addRowButton, button#purchaseButton { 
        width: 200px; 
        padding: 14px 24px;
      }
      #grandTotal { font-size: 22px; }
    }
  </style>
</head>

<body>
  <div id="productList">
    <div class="widget-header">
      <h1 class="widget-title">Deal Creation Portal</h1>
      <p class="widget-subtitle">Create new deals with product details</p>
    </div>
    
    <div class="deal-info">
      <div class="form-group">
        <label for="dealName">Deal Name*:</label>
        <input type="text" id="dealName" required placeholder="Enter Deal Name">
      </div>
      <div class="form-group">
        <label for="closingDate">Closing Date*:</label>
        <input type="date" id="closingDate" required>
      </div>
    </div>
    
    <div class="table-container">
      <table>
        <thead>
          <tr>
            <th>Category</th>
            <th>Product</th>
            <th>Price</th>
            <th>Available Qty</th>
            <th>Quantity</th>
            <th>Total</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody id="productTableBody">
          <!-- Rows will be dynamically added here -->
        </tbody>
      </table>
    </div>
    
    <div class="button-container">
      <button id="addRowButton">+ Add Product</button>
      <button id="purchaseButton">🛒 Create Deal</button>
    </div>
    
    <div id="grandTotal">Grand Total: ₹0.00</div>
  </div>

  <script>
    let allProducts = [];
    let dealId = null;
    let rowCounter = 0;

    ZOHO.embeddedApp.on("PageLoad", function (data) {
      document.getElementById("productList").classList.add("loading");
      
      ZOHO.CRM.API.getAllRecords({
        Entity: "Products",
        sort_order: "asc",
        per_page: 200,
        page: 1
      }).then(function (response) {
        document.getElementById("productList").classList.remove("loading");
        
        const productDetails = response.data;

        if (productDetails && productDetails.length > 0) {
          allProducts = productDetails.map(product => ({
            id: product.id,
            name: product.Product_Name,
            category: product.Product_Category || "Uncategorized",
            price: product.Unit_Price || "0.00",
            availableQty: product.Qty_in_Stock || 0
          }));

          addRow();
        } else {
          document.getElementById("productList").innerHTML = "<p>No products found in the Products module.</p>";
        }
      }).catch(function (error) {
        document.getElementById("productList").classList.remove("loading");
        console.error("Error fetching products:", error);
        document.getElementById("productList").innerHTML = "<p>Error fetching products. Please try again later.</p>";
      });
    });

    function addRow() {
      const tableBody = document.getElementById("productTableBody");
      const row = document.createElement("tr");
      row.style.animationDelay = `${rowCounter * 0.1}s`;
      rowCounter++;

      // Get unique categories
      const categories = [...new Set(allProducts.map(product => product.category))];

      row.innerHTML = `
        <td>
          <select class="category-dropdown">
            <option value="">Select Category</option>
            ${categories.map(category => `<option value="${category}">${category}</option>`).join("")}
          </select>
        </td>
        <td>
          <select class="product-dropdown">
            <option value="">Select Product</option>
          </select>
        </td>
        <td>
          <input type="text" placeholder="Price" readonly>
        </td>
        <td>
          <input type="text" placeholder="Available" readonly>
        </td>
        <td>
          <input type="number" placeholder="Quantity" min="1">
        </td>
        <td>
          <input type="text" placeholder="Total" readonly>
        </td>
        <td>
          <button class="remove-row-btn" title="Remove Row">&times;</button>
        </td>
      `;

      const categoryDropdown = row.querySelector(".category-dropdown");
      const productDropdown = row.querySelector(".product-dropdown");
      const priceInput = row.querySelector("input[placeholder='Price']");
      const availableInput = row.querySelector("input[placeholder='Available']");
      const quantityInput = row.querySelector("input[placeholder='Quantity']");
      const totalInput = row.querySelector("input[placeholder='Total']");
      const removeButton = row.querySelector(".remove-row-btn");

      // Category change event
      categoryDropdown.addEventListener("change", function () {
        const selectedCategory = this.value;
        if (selectedCategory) {
          const filteredProducts = allProducts.filter(product => product.category === selectedCategory);
          productDropdown.innerHTML = `
            <option value="">Select Product</option>
            ${filteredProducts.map(product => 
              `<option value="${product.id}" data-price="${product.price}" data-available="${product.availableQty}">
                ${product.name}
              </option>`
            ).join("")}
          `;
        } else {
          productDropdown.innerHTML = `<option value="">Select Product</option>`;
          clearRowData();
        }
      });

      // Product change event
      productDropdown.addEventListener("change", function () {
        const selectedOption = this.options[this.selectedIndex];
        if (selectedOption.value) {
          const price = selectedOption.getAttribute("data-price") || "0.00";
          const available = selectedOption.getAttribute("data-available") || "0";
          priceInput.value = price;
          availableInput.value = available;
          calculateTotal();
        } else {
          clearRowData();
        }
      });

      // Quantity input event
      quantityInput.addEventListener("input", function() {
        const quantity = parseInt(this.value) || 0;
        const available = parseInt(availableInput.value) || 0;
        
        if (quantity <= 0) {
          alert("Quantity must be greater than 0");
          this.value = "";
          totalInput.value = "";
          updateGrandTotal();
          return;
        }
        
        if (quantity > available) {
          alert(`Quantity cannot exceed available stock (${available})`);
          this.value = "";
          totalInput.value = "";
          updateGrandTotal();
          return;
        }
        
        calculateTotal();
      });

      // Remove button event
      removeButton.addEventListener("click", function () {
        row.classList.add("row-removing");
        setTimeout(() => {
          if (row.parentNode) {
            tableBody.removeChild(row);
            updateGrandTotal();
          }
        }, 500);
      });

      function clearRowData() {
        priceInput.value = "";
        availableInput.value = "";
        quantityInput.value = "";
        totalInput.value = "";
        updateGrandTotal();
      }

      function calculateTotal() {
        const price = parseFloat(priceInput.value) || 0;
        const quantity = parseInt(quantityInput.value) || 0;
        const available = parseInt(availableInput.value) || 0;
        
        if (quantity > 0 && quantity <= available && price > 0) {
          totalInput.value = (price * quantity).toFixed(2);
          
          // Add success animation to total input
          totalInput.style.animation = "successPulse 0.5s ease-in-out";
          setTimeout(() => {
            totalInput.style.animation = "";
          }, 500);
          
          updateGrandTotal();
        } else {
          totalInput.value = "";
          updateGrandTotal();
        }
      }

      tableBody.appendChild(row);
    }

    function updateGrandTotal() {
      const totalInputs = document.querySelectorAll("#productTableBody input[placeholder='Total']");
      let grandTotal = 0;
      totalInputs.forEach(input => {
        grandTotal += parseFloat(input.value) || 0;
      });
      
      const grandTotalElement = document.getElementById("grandTotal");
      grandTotalElement.innerText = `Grand Total: ₹${grandTotal.toFixed(2)}`;
      
      // Add pulse animation when total changes
      grandTotalElement.style.animation = "totalPulse 1s ease-in-out";
      setTimeout(() => {
        grandTotalElement.style.animation = "totalPulse 2s ease-in-out infinite";
      }, 1000);
    }

    function saveToDealsSubform() {
      const button = document.getElementById("purchaseButton");
      button.classList.add("loading");
      
      const dealName = document.getElementById('dealName').value;
      const closingDate = document.getElementById('closingDate').value;

      if (!dealName || !closingDate) {
        button.classList.remove("loading");
        alert("Deal Name and Closing Date are mandatory fields!");
        return;
      }

      const rows = document.querySelectorAll("#productTableBody tr");
      const subformData = [];
      let invalidData = false;

      rows.forEach((row, idx) => {
        const category = row.querySelector(".category-dropdown").value;
        const productId = row.querySelector(".product-dropdown").value;
        const price = row.querySelector("input[placeholder='Price']").value;
        const quantity = row.querySelector("input[placeholder='Quantity']").value;
        const total = row.querySelector("input[placeholder='Total']").value;

        if (!productId || !quantity || parseFloat(quantity) <= 0 || parseFloat(price) <= 0) {
          invalidData = true;
        } else {
          subformData.push({
            Category: category,
            Product_Name: productId,
            Quantity: parseInt(quantity, 10),
            Total: parseFloat(total),
            Unit_Price: parseFloat(price)
          });
        }
      });

      if (invalidData) {
        button.classList.remove("loading");
        alert("Please ensure all rows have valid product selection and quantities.");
        return;
      }

      if (subformData.length === 0) {
        button.classList.remove("loading");
        alert("Please add at least one product to create a deal.");
        return;
      }

      let grandTotal = 0;
      subformData.forEach(item => {
        grandTotal += parseFloat(item.Total) || 0;
      });

      const dealData = {
        Deal_Name: dealName,
        Closing_Date: closingDate,
        Pipeline: "Standard (Standard)", 
        Stage: "Qualification",
        Product_Details: subformData,
        Amount: grandTotal.toFixed(2)
      };

      ZOHO.CRM.API.insertRecord({
        Entity: "Deals",
        APIData: dealData,
        Trigger: ["workflow"]
      }).then(function(response) {
        button.classList.remove("loading");
        if (response.data && response.data[0] && response.data[0].code === "SUCCESS") {
          document.getElementById("productList").classList.add("success");
          alert("New deal created successfully!");
          setTimeout(() => {
            ZOHO.CRM.UI.Popup.closeReload();
          }, 1000);
        } else {
          alert("Error creating new deal record: " + JSON.stringify(response.data[0]));
        }
      }).catch(function(error) {
        button.classList.remove("loading");
        console.error("Error creating deal:", error);
        alert("Error creating new deal record: " + error.message);
      });
    }

    document.getElementById("addRowButton").addEventListener("click", addRow);
    document.getElementById("purchaseButton").addEventListener("click", saveToDealsSubform);

    ZOHO.embeddedApp.init();
  </script>
</body>
</html>