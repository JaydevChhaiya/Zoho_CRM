<!DOCTYPE html>
<html>

<head>
  <script src="https://live.zwidgets.com/js-sdk/1.2/ZohoEmbededAppSDK.min.js"></script>
  <meta charset="UTF-8">
  <style>
    body {
      background: #f4f8fb;
      font-family: 'Segoe UI', Arial, sans-serif;
      margin: 0;
      padding: 40px 0;
    }

    #productList {
      background: #fff;
      border-radius: 12px;
      box-shadow: 0 4px 24px rgba(0,0,0,0.08);
      max-width: 900px;
      margin: 0 auto;
      padding: 32px 28px 24px 28px;
    }

    table {
      width: 100%;
      border-collapse: separate;
      border-spacing: 0;
      margin-bottom: 18px;
      table-layout: fixed;
    }

    thead tr {
      background: linear-gradient(90deg, #2d7ff9 60%, #1a5fc2 100%);
    }

    th {
      color: #fff;
      font-weight: 600;
      font-size: 16px;
      padding: 14px 10px;
      border-right: 1px solid #1a5fc2;
      text-align: center;
      letter-spacing: 0.5px;
    }

    th:last-child {
      border-right: none;
    }

    tbody tr {
      background: #f8fbff;
      transition: box-shadow 0.2s;
    }

    tbody tr:hover {
      box-shadow: 0 2px 8px rgba(45,127,249,0.10);
      background: #eaf3ff;
    }

    td {
      font-size: 15px;
      padding: 12px 10px;
      border-right: 1px solid #e3eaf5;
      border-bottom: 1px solid #e3eaf5;
      vertical-align: middle;
      text-align: center;
    }

    td:last-child {
      border-right: none;
    }

    tr:last-child td {
      border-bottom: none;
    }

    /* Set custom column widths for better visibility */
    th:nth-child(1), td:nth-child(1) { width: 18%; }  /* Category */
    th:nth-child(2), td:nth-child(2) { width: 20%; }  /* Product */
    th:nth-child(3), td:nth-child(3) { width: 14%; }  /* Price */
    th:nth-child(4), td:nth-child(4) { width: 14%; }  /* Available Qty */
    th:nth-child(5), td:nth-child(5) { width: 14%; }  /* Quantity */
    th:nth-child(6), td:nth-child(6) { width: 16%; }  /* Total */
    th:nth-child(7), td:nth-child(7) { width: 4%; }   /* Action */

    select, input[type="text"], input[type="number"] {
      width: 100%;
      box-sizing: border-box;
      padding: 7px 8px;
      border: 1px solid #bcd0ee;
      border-radius: 6px;
      font-size: 15px;
      background: #fff;
      transition: border-color 0.2s, box-shadow 0.2s;
      text-align: center;
    }

    select:focus, input:focus {
      border-color: #2d7ff9;
      box-shadow: 0 0 4px #2d7ff9;
      outline: none;
    }

    button#addRowButton {
      background: linear-gradient(90deg, #2d7ff9 60%, #1a5fc2 100%);
      color: #fff;
      border: none;
      border-radius: 6px;
      padding: 10px 22px;
      font-size: 16px;
      font-weight: 500;
      cursor: pointer;
      box-shadow: 0 2px 8px rgba(45,127,249,0.10);
      transition: background 0.2s;
      margin-bottom: 10px;
      margin-top: 8px;
      display: block;
    }

    button#addRowButton:hover {
      background: #1a5fc2;
    }

    button#purchaseButton,
    button.primary-btn {
      background: linear-gradient(90deg, #2d7ff9 60%, #1a5fc2 100%);
      color: #fff;
      border: none;
      border-radius: 6px;
      padding: 10px 22px;
      font-size: 16px;
      font-weight: 500;
      cursor: pointer;
      box-shadow: 0 2px 8px rgba(45,127,249,0.10);
      transition: background 0.2s;
      margin-top: 8px;
      display: block;
    }

    button#purchaseButton:hover,
    button.primary-btn:hover {
      background: #1a5fc2;
    }

    #grandTotal {
      font-size: 18px;
      font-weight: 600;
      color: #2d7ff9;
      text-align: right;
      margin-top: 10px;
      letter-spacing: 0.5px;
    }

    .remove-row-btn {
      background: #ff4d4f;
      color: #fff;
      border: none;
      border-radius: 50%;
      width: 28px;
      height: 28px;
      font-size: 18px;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto;
      transition: background 0.2s;
      box-shadow: 0 2px 6px rgba(255,77,79,0.10);
    }

    .remove-row-btn:hover {
      background: #d9363e;
    }

    th:last-child, td:last-child {
      width: 40px;
      min-width: 40px;
      max-width: 40px;
      padding: 0;
      text-align: center;
    }

    @media (max-width: 900px) {
      #productList {
        padding: 10px;
        max-width: 100%;
      }
      th, td {
        font-size: 13px;
        padding: 8px 4px;
      }
      button#addRowButton {
        font-size: 14px;
        padding: 8px 12px;
      }
      #grandTotal {
        font-size: 15px;
      }
    }

    .primary-btn {
      background: linear-gradient(90deg, #28a745 60%, #218838 100%);
      color: #fff;
      border: none;
      border-radius: 6px;
      padding: 10px 22px;
      font-size: 16px;
      font-weight: 500;
      cursor: pointer;
      box-shadow: 0 2px 8px rgba(40,167,69,0.10);
      transition: background 0.2s;
      margin-bottom: 10px;
      margin-top: 8px;
      display: block;
    }

    .primary-btn:hover {
      background: #218838;
    }

    .flex-container {
      display: flex;
      gap: 12px;
      margin-bottom: 10px;
    }

    .deal-info {
      margin-bottom: 20px;
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 20px;
      padding: 16px;
      background: #f0faff;
      border-left: 4px solid #2d7ff9;
      border-radius: 8px;
    }

    .form-group {
      display: flex;
      flex-direction: column;
      gap: 8px;
    }

    .form-group label {
      font-weight: 600;
      color: #333;
    }

    .form-group input {
      padding: 8px 12px;
      border: 1px solid #bcd0ee;
      border-radius: 6px;
      font-size: 15px;
    }

    .form-group input:focus {
      border-color: #2d7ff9;
      box-shadow: 0 0 4px #2d7ff9;
      outline: none;
    }
  </style>
</head>

<body>
  <div id="productList">
    <div class="deal-info">
      <div class="form-group">
        <label for="dealName">Deal Name*:</label>
        <input type="text" id="dealName" required placeholder="Enter Deal Name">
      </div>
      <div class="form-group">
        <label for="closingDate">Closing Date*:</label>
        <input type="date" id="closingDate" required>
      </div>
    </div>
    <table>
      <thead>
        <tr>
          <th>Category</th>
          <th>Product</th>
          <th>Price</th>
          <th>Available Qty</th>
          <th>Quantity</th>
          <th>Total</th>
          <th></th>
        </tr>
      </thead>
      <tbody id="productTableBody">
        <!-- Rows will be dynamically added here -->
      </tbody>
    </table>
    <div class="flex-container">
      <button id="addRowButton">Add Row</button>
      <button id="purchaseButton" class="primary-btn">Purchase</button>
    </div>
    <div id="grandTotal">Grand Total: â‚¹0.00</div>
  </div>

  <script>
    let allProducts = [];
    let dealId = null;

    ZOHO.embeddedApp.on("PageLoad", function (data) {
      if (data && data.Entity && data.EntityId) {
        dealId = Array.isArray(data.EntityId) ? data.EntityId[0] : data.EntityId;
      } else {
        document.getElementById("productList").innerHTML = "<p style='color:red;'>This widget must be opened from a Deal record.</p>";
        return;
      }

      ZOHO.CRM.API.getAllRecords({
        Entity: "Products",
        sort_order: "asc",
        per_page: 50,
        page: 1
      }).then(function (response) {
        const productDetails = response.data;

        if (productDetails && productDetails.length > 0) {
          allProducts = productDetails.map(product => ({
            id: product.id,
            name: product.Product_Name,
            category: product.Product_Category || "Uncategorized",
            price: product.Unit_Price || "0.00",
            availableQty: product.Qty_in_Stock || 0
          }));

          addRow();
        } else {
          document.getElementById("productList").innerHTML = "<p>No products found in the Products module.</p>";
        }
      }).catch(function (error) {
        console.error("Error fetching products:", error);
        document.getElementById("productList").innerHTML = "<p>Error fetching products. Please try again later.</p>";
      });
    });

    function addRow() {
      const tableBody = document.getElementById("productTableBody");
      const row = document.createElement("tr");

      // Category dropdown
      const categoryCell = document.createElement("td");
      const categoryDropdown = document.createElement("select");
      categoryDropdown.innerHTML = `
        <option value="">Select a Category</option>
        ${[...new Set(allProducts.map(product => product.category))].map(category => `<option value="${category}">${category}</option>`).join("")}
      `;
      categoryCell.appendChild(categoryDropdown);
      row.appendChild(categoryCell);

      // Product dropdown
      const productCell = document.createElement("td");
      const productDropdown = document.createElement("select");
      productDropdown.classList.add("product-dropdown");
      productDropdown.innerHTML = `<option value="">Select a Product</option>`;
      productCell.appendChild(productDropdown);
      row.appendChild(productCell);

      // Price input
      const priceCell = document.createElement("td");
      const priceInput = document.createElement("input");
      priceInput.type = "text";
      priceInput.placeholder = "Price";
      priceInput.readOnly = true;
      priceCell.appendChild(priceInput);
      row.appendChild(priceCell);

      // Available Quantity cell
      const availableQtyCell = document.createElement("td");
      const availableQtyInput = document.createElement("input");
      availableQtyInput.type = "text";
      availableQtyInput.placeholder = "Available";
      availableQtyInput.readOnly = true;
      availableQtyCell.appendChild(availableQtyInput);
      row.appendChild(availableQtyCell);

      // Quantity input
      const quantityCell = document.createElement("td");
      const quantityInput = document.createElement("input");
      quantityInput.type = "number";
      quantityInput.placeholder = "Quantity";
      quantityInput.min = 1;
      quantityCell.appendChild(quantityInput);
      row.appendChild(quantityCell);

      // Total input
      const totalCell = document.createElement("td");
      const totalInput = document.createElement("input");
      totalInput.type = "text";
      totalInput.placeholder = "Total";
      totalInput.readOnly = true;
      totalCell.appendChild(totalInput);
      row.appendChild(totalCell);

      // Remove button
      const actionCell = document.createElement("td");
      const removeButton = document.createElement("button");
      removeButton.className = "remove-row-btn";
      removeButton.innerHTML = "&times;";
      removeButton.title = "Remove Row";
      removeButton.onclick = function () {
        tableBody.removeChild(row);
        updateGrandTotal();
      };
      actionCell.appendChild(removeButton);
      row.appendChild(actionCell);

      // Add event listeners
      categoryDropdown.addEventListener("change", function () {
        const selectedCategory = this.value;
        if (selectedCategory) {
          const filteredProducts = allProducts.filter(product => product.category === selectedCategory);
          productDropdown.innerHTML = `
            <option value="">Select a Product</option>
            ${filteredProducts.map(product => `<option value="${product.id}" data-price="${product.price}" data-available="${product.availableQty}">${product.name}</option>`).join("")}
          `;
        } else {
          productDropdown.innerHTML = `<option value="">Select a Product</option>`;
          priceInput.value = "";
          totalInput.value = "";
          availableQtyInput.value = "";
          updateGrandTotal();
        }
      });

      productDropdown.addEventListener("change", function () {
        const selectedOption = this.options[this.selectedIndex];
        const price = selectedOption.getAttribute("data-price") || "0.00";
        const available = selectedOption.getAttribute("data-available") || "";
        priceInput.value = price;
        availableQtyInput.value = available;
        calculateTotal();
      });

      quantityInput.addEventListener("input", function() {
        const quantity = parseInt(this.value) || 0;
        const available = parseInt(availableQtyInput.value) || 0;
        
        if (quantity <= 0) {
          alert("Quantity must be greater than 0");
          this.value = "";
          totalInput.value = "";
          updateGrandTotal();
          return;
        }
        
        if (quantity > available) {
          alert(`Please enter quantity less than or equal to available quantity (${available})`);
          this.value = "";
          totalInput.value = "";
          updateGrandTotal();
          return;
        }
        
        calculateTotal();
      });

      function calculateTotal() {
        const price = parseFloat(priceInput.value) || 0;
        const quantity = parseInt(quantityInput.value) || 0;
        const available = parseInt(availableQtyInput.value) || 0;
        
        if (quantity > 0 && quantity <= available) {
          totalInput.value = (price * quantity).toFixed(2);
          updateGrandTotal();
        } else {
          totalInput.value = "";
          updateGrandTotal();
        }
      }

      tableBody.appendChild(row);
    }

    function updateGrandTotal() {
      const totalInputs = document.querySelectorAll("#productTableBody input[placeholder='Total']");
      let grandTotal = 0;
      totalInputs.forEach(input => {
        grandTotal += parseFloat(input.value) || 0;
      });
      document.getElementById("grandTotal").innerText = `Grand Total: â‚¹${grandTotal.toFixed(2)}`;
    }

    function saveToDealsSubform() {
  // Get deal name and closing date from new input fields
  const dealName = document.getElementById('dealName').value;
  const closingDate = document.getElementById('closingDate').value;

  if (!dealName || !closingDate) {
    alert("Deal Name and Closing Date are mandatory fields!");
    return;
  }

  const rows = document.querySelectorAll("#productTableBody tr");
  const subformData = [];
  let invalidData = false;

  rows.forEach((row, idx) => {
    const category = row.querySelector("select").value;
    const productDropdown = row.querySelector(".product-dropdown");
    const productId = productDropdown ? productDropdown.value : "";
    const price = row.querySelector("input[placeholder='Price']").value;
    const quantity = row.querySelector("input[placeholder='Quantity']").value;
    const total = row.querySelector("input[placeholder='Total']").value;

    if (!productId || !quantity || parseFloat(quantity) <= 0 || parseFloat(price) <= 0) {
      invalidData = true;
    } else {
      subformData.push({
        Category: category,
        Product_Name: productId,
        Quantity: parseInt(quantity, 10),
        Total: parseFloat(total),
        Unit_Price: parseFloat(price)
      });
    }
  });

  if (invalidData) {
    alert("Invalid data found in one or more rows. Please ensure all rows have a selected product and valid quantity/price.");
    return;
  }

  // Calculate grand total
  let grandTotal = 0;
  subformData.forEach(item => {
    grandTotal += parseFloat(item.Total) || 0;
  });

  // Create new deal record with Pipeline field
  const dealData = {
    Deal_Name: dealName,
    Closing_Date: closingDate,
    Pipeline: "Standard (Standard)", 
    Stage: "Qualification",
    Product_Details: subformData,
    Total_Bag_value: grandTotal.toFixed(2)
  };

  ZOHO.CRM.API.insertRecord({
    Entity: "Deals",
    APIData: dealData,
    Trigger: []
  }).then(function(response) {
    if (response.data && response.data[0] && response.data[0].code === "SUCCESS") {
      alert("New deal created successfully!");
      ZOHO.CRM.UI.Popup.closeReload()
        .then(function(data) {
          console.log(data);
        });
    } else {
      alert("Error creating new deal record: " + JSON.stringify(response.data[0]));
    }
  }).catch(function(error) {
    console.error("Error creating deal:", error);
    alert("Error creating new deal record: " + error.message);
  });
}

    document.getElementById("addRowButton").addEventListener("click", addRow);
    document.getElementById("purchaseButton").addEventListener("click", saveToDealsSubform);

    ZOHO.embeddedApp.init();
  </script>
</body>
</html>
